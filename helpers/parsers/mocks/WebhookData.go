// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	bitbucket "github.com/go-playground/webhooks/v6/bitbucket"
	azuredevops "github.com/mcdafydd/go-azuredevops/azuredevops"

	gin "github.com/gin-gonic/gin"

	gitlab "github.com/xanzy/go-gitlab"

	go_bitbucket_serverbitbucket "github.com/suhaibmujahid/go-bitbucket-server/bitbucket"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// WebhookData is an autogenerated mock type for the WebhookData type
type WebhookData struct {
	mock.Mock
}

// AzureDevopsDeleted provides a mock function with given fields: e
func (_m *WebhookData) AzureDevopsDeleted(e *azuredevops.GitPush) bool {
	ret := _m.Called(e)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*azuredevops.GitPush) bool); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BitbucketDeleted provides a mock function with given fields: b
func (_m *WebhookData) BitbucketDeleted(b bitbucket.RepoPushPayload) bool {
	ret := _m.Called(b)

	var r0 bool
	if rf, ok := ret.Get(0).(func(bitbucket.RepoPushPayload) bool); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BitbucketServerDeleted provides a mock function with given fields: c
func (_m *WebhookData) BitbucketServerDeleted(c *go_bitbucket_serverbitbucket.PushEvent) {
	_m.Called(c)
}

// GitlabDeleted provides a mock function with given fields: c
func (_m *WebhookData) GitlabDeleted(c *gitlab.PushEvent) bool {
	ret := _m.Called(c)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gitlab.PushEvent) bool); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ParseAzureDevops provides a mock function with given fields: c
func (_m *WebhookData) ParseAzureDevops(c *gin.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseBitbucket provides a mock function with given fields: c
func (_m *WebhookData) ParseBitbucket(c *gin.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseBitbucketServer provides a mock function with given fields: c
func (_m *WebhookData) ParseBitbucketServer(c *gin.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseBranch provides a mock function with given fields: e
func (_m *WebhookData) ParseBranch(e *azuredevops.GitPush) string {
	ret := _m.Called(e)

	var r0 string
	if rf, ok := ret.Get(0).(func(*azuredevops.GitPush) string); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ParseData provides a mock function with given fields: c
func (_m *WebhookData) ParseData(c *gin.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseGithub provides a mock function with given fields: c
func (_m *WebhookData) ParseGithub(c *gin.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseGitlab provides a mock function with given fields: c
func (_m *WebhookData) ParseGitlab(c *gin.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseHeaders provides a mock function with given fields: headers
func (_m *WebhookData) ParseHeaders(headers *http.Header) (string, error) {
	ret := _m.Called(headers)

	var r0 string
	if rf, ok := ret.Get(0).(func(*http.Header) string); ok {
		r0 = rf(headers)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Header) error); ok {
		r1 = rf(headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseRawResource provides a mock function with given fields: e
func (_m *WebhookData) ParseRawResource(e *azuredevops.Event) (*azuredevops.GitPush, error) {
	ret := _m.Called(e)

	var r0 *azuredevops.GitPush
	if rf, ok := ret.Get(0).(func(*azuredevops.Event) *azuredevops.GitPush); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azuredevops.GitPush)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*azuredevops.Event) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
